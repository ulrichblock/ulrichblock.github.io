{"version":3,"file":"component---src-templates-post-list-tsx-09662a55b971912d850d.js","mappings":"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","sources":["webpack://ulrich-block/./node_modules/react-bootstrap/esm/Col.js","webpack://ulrich-block/./src/components/header/PostHeader.tsx","webpack://ulrich-block/./src/components/tags/TechTags.tsx","webpack://ulrich-block/./src/lib/utils.ts","webpack://ulrich-block/./src/templates/post-list.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"className\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];\nvar Col = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\nfunction (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'col');\n  var spans = [];\n  var classes = [];\n  DEVICE_SIZES.forEach(function (brkPoint) {\n    var propValue = props[brkPoint];\n    delete props[brkPoint];\n    var span;\n    var offset;\n    var order;\n\n    if (typeof propValue === 'object' && propValue != null) {\n      var _propValue$span = propValue.span;\n      span = _propValue$span === void 0 ? true : _propValue$span;\n      offset = propValue.offset;\n      order = propValue.order;\n    } else {\n      span = propValue;\n    }\n\n    var infix = brkPoint !== 'xs' ? \"-\" + brkPoint : '';\n    if (span) spans.push(span === true ? \"\" + prefix + infix : \"\" + prefix + infix + \"-\" + span);\n    if (order != null) classes.push(\"order\" + infix + \"-\" + order);\n    if (offset != null) classes.push(\"offset\" + infix + \"-\" + offset);\n  });\n\n  if (!spans.length) {\n    spans.push(prefix); // plain 'col'\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n    ref: ref,\n    className: classNames.apply(void 0, [className].concat(spans, classes))\n  }));\n});\nCol.displayName = 'Col';\nexport default Col;","import './post-header.scss'\nimport { Link } from 'gatsby'\nimport React from 'react'\n\ninterface IProps {\n  className?: string\n  date: string\n  timeToRead: number\n  title: string\n  to?: string\n}\n\nexport const PostHeader = ({ className = '', date, timeToRead, title, to }: IProps): JSX.Element => {\n  return (\n    <div className={className}>\n      {to && (\n        <h3 className=\"blog-post-title\">\n          <Link to={to}>{title}</Link>\n        </h3>\n      )}\n      {!to && <h2 className=\"blog-post-title\">{title}</h2>}\n      <p className=\"blog-post-meta\">\n        Erstellt am {date} | Lesedauer: {timeToRead} Minute(n)\n      </p>\n    </div>\n  )\n}\n","import { ILabels } from '../../types'\nimport React from 'react'\nimport { TechTag } from './TechTag'\nimport { kebabCase } from '../../lib/utils'\n\nexport function getTechTags(allTags: ILabels[], usedTags?: string[], noFilter = false): JSX.Element[] {\n  if (!Array.isArray(usedTags)) {\n    return []\n  }\n\n  const techTags: JSX.Element[] = []\n\n  for (let i = 0; i < usedTags.length; i++) {\n    const definedTag = allTags.find(({ tag }: ILabels): boolean => tag === usedTags[i])\n\n    if (definedTag) {\n      techTags.push(\n        <TechTag\n          key={i}\n          tag={definedTag.tag}\n          tech={definedTag.tech}\n          name={definedTag.name}\n          size={definedTag.size}\n          color={definedTag.color}\n          viewBox={definedTag.viewBox}\n        />\n      )\n    } else if (noFilter) {\n      techTags.push(\n        <TechTag\n          key={i}\n          tag={kebabCase(usedTags[i])}\n          tech={usedTags[i]}\n          name=\"\"\n          size={20}\n          color=\"white\"\n          viewBox=\"10 20 199 199\"\n        />\n      )\n    }\n  }\n\n  return techTags\n}\n","export function kebabCase(value: string): string {\n  return Array.from(value.toLowerCase().matchAll(/([a-z0-9]+)/g))\n    .map(([, part] = ['', '']): string => part)\n    .join('-')\n}\n","import { Link, PageProps, graphql } from 'gatsby'\nimport Col from 'react-bootstrap/Col'\nimport { IData } from '../types'\nimport { Layout } from '../components/Layout'\nimport { PostHeader } from '../components/header/PostHeader'\nimport React from 'react'\nimport { SEO } from '../components/SEO'\nimport { Sidebar } from '../components/sidebar/Sidebar'\nimport { getTechTags } from '../components/tags/TechTags'\n\ninterface IPageContext {\n  currentPage: number\n  numPages: number\n}\n\ntype PostListProps = PageProps<IData, IPageContext>\n\nconst PostList = (props: PostListProps): JSX.Element => {\n  const posts = props.data.allMarkdownRemark.edges\n  const { currentPage, numPages } = props.pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\n  const nextPage = (Number(currentPage) + 1).toString()\n\n  return (\n    <Layout>\n      <SEO title=\"Blog Beitragsliste\" />\n      <Col md={8}>\n        {posts.map(post => {\n          const tags = post.node.frontmatter.tags\n\n          return (\n            <div key={post.node.id} className=\"blog-post\">\n              <PostHeader\n                date={post.node.frontmatter.date}\n                timeToRead={post.node.timeToRead}\n                title={post.node.frontmatter.title}\n                to={post.node.fields.slug}\n              />\n              <p className=\"mt-3 d-inline\">\n                {post.node.excerpt}&nbsp;\n                <Link to={post.node.fields.slug}>Vollständigen Post lesen</Link>\n              </p>\n              <div>{getTechTags(props.data.site.siteMetadata.labels, tags)}</div>\n            </div>\n          )\n        })}\n\n        <nav className=\"blog-pagination\">\n          {!isFirst && (\n            <Link\n              to={`/${prevPage}`}\n              rel=\"prev\"\n              className=\"btn btn-outline-secondary\"\n              tabIndex={-1}\n              aria-disabled={true}\n            >\n              ← Vorherige Seite\n            </Link>\n          )}\n          {!isLast && (\n            <Link\n              to={`/${nextPage}`}\n              rel=\"next\"\n              className=\"btn btn-outline-secondary\"\n              tabIndex={-1}\n              aria-disabled={true}\n            >\n              N&auml;chste Seite →\n            </Link>\n          )}\n        </nav>\n      </Col>\n      <Sidebar />\n    </Layout>\n  )\n}\n\nexport const listQuery = graphql`\n  query PaginateQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n        author\n        labels {\n          tag\n          tech\n          name\n          size\n          color\n          viewBox\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: $limit\n      skip: $skip\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { published: { eq: true } }, fileAbsolutePath: { regex: \"/^((?!/content/pages/).)*$/\" } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 200)\n          html\n          id\n          frontmatter {\n            title\n            date(formatString: \"YYYY-MM-DD\")\n            tags\n          }\n          fields {\n            slug\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n\nexport default PostList\n"],"names":["_excluded","DEVICE_SIZES","Col","_ref","ref","bsPrefix","className","_ref$as","as","Component","props","prefix","spans","classes","forEach","brkPoint","span","offset","order","propValue","_propValue$span","infix","push","length","concat","displayName","PostHeader","date","timeToRead","title","to","getTechTags","allTags","usedTags","noFilter","Array","isArray","techTags","i","value","definedTag","find","tag","TechTag","key","tech","name","size","color","viewBox","from","toLowerCase","matchAll","map","join","posts","data","allMarkdownRemark","edges","pageContext","currentPage","isFirst","isLast","numPages","prevPage","toString","nextPage","Number","md","post","tags","node","frontmatter","id","fields","slug","excerpt","site","siteMetadata","labels","rel","tabIndex"],"sourceRoot":""}